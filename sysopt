#!/usr/bin/env bash
# Enhanced system optimization script with hardware detection and adaptive configurations

# Define color codes for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Version information
VERSION="2.0"
LAST_UPDATED="2025-01-30"

# Global variables for system information
declare -A CPU_INFO
declare -A MEM_INFO
declare -A DISK_INFO
declare -A NET_INFO

gather_system_info() {
    echo -e "${BLUE}Gathering detailed system information...${NC}"
    
    # CPU Information
    CPU_INFO[model]=$(lscpu | grep "Model name" | cut -d ":" -f2 | sed 's/^[ \t]*//')
    CPU_INFO[cores]=$(lscpu | grep "^CPU(s):" | cut -d ":" -f2 | sed 's/^[ \t]*//')
    CPU_INFO[threads_per_core]=$(lscpu | grep "Thread(s) per core" | cut -d ":" -f2 | sed 's/^[ \t]*//')
    CPU_INFO[cache_size]=$(lscpu | grep "L3 cache" | cut -d ":" -f2 | sed 's/^[ \t]*//')
    CPU_INFO[virtualization]=$(lscpu | grep -i "Virtualization:" | cut -d ":" -f2 | sed 's/^[ \t]*//')

    # Memory Information
    MEM_INFO[total]=$(free -b | grep "Mem:" | awk '{print $2}')
    MEM_INFO[available]=$(free -b | grep "Mem:" | awk '{print $7}')
    MEM_INFO[swap_total]=$(free -b | grep "Swap:" | awk '{print $2}')
    MEM_INFO[huge_pages]=$(sysctl -n vm.nr_hugepages)
    
    # Disk Information
    DISK_INFO[device]=$(lsblk -d -n -o NAME | head -n1)
    DISK_INFO[type]=$(cat /sys/block/${DISK_INFO[device]}/queue/rotational)
    DISK_INFO[scheduler]=$(cat /sys/block/${DISK_INFO[device]}/queue/scheduler)
    
    # Network Information
    NET_INFO[interface]=$(ip route | grep default | awk '{print $5}')
    NET_INFO[speed]=$(ethtool ${NET_INFO[interface]} 2>/dev/null | grep "Speed:" | cut -d ":" -f2 | sed 's/^[ \t]*//')
    NET_INFO[driver]=$(ethtool -i ${NET_INFO[interface]} 2>/dev/null | grep "driver:" | cut -d ":" -f2 | sed 's/^[ \t]*//')
}

generate_optimizations() {
    local output_file="/etc/sysctl.d/99-performance.conf"
    echo "# Generated by System Optimizer v${VERSION} on $(date)" > "$output_file"
    
    # CPU-specific optimizations
    if [[ ${CPU_INFO[model]} == *"i7-6700"* ]]; then
        # Specific optimizations for your i7-6700
        echo -e "\n# CPU Optimizations for i7-6700" >> "$output_file"
        echo "kernel.sched_migration_cost_ns = 5000000" >> "$output_file"
        echo "kernel.sched_autogroup_enabled = 0" >> "$output_file"
        echo "kernel.sched_min_granularity_ns = 10000000" >> "$output_file"
        echo "kernel.sched_wakeup_granularity_ns = 15000000" >> "$output_file"
    else
        # Generic CPU optimizations
        echo -e "\n# Generic CPU Optimizations" >> "$output_file"
        echo "kernel.sched_migration_cost_ns = 1000000" >> "$output_file"
        echo "kernel.sched_autogroup_enabled = 1" >> "$output_file"
    fi

    # Memory optimizations based on total RAM
    local total_ram_gb=$((${MEM_INFO[total]} / 1024 / 1024 / 1024))
    echo -e "\n# Memory Optimizations for ${total_ram_gb}GB RAM" >> "$output_file"
    
    if ((total_ram_gb >= 32)); then
        # Optimizations for high-memory systems (32GB+)
        echo "vm.swappiness = 5" >> "$output_file"
        echo "vm.vfs_cache_pressure = 50" >> "$output_file"
        echo "vm.dirty_ratio = 40" >> "$output_file"
        echo "vm.dirty_background_ratio = 5" >> "$output_file"
        echo "vm.nr_hugepages = 1024" >> "$output_file"
    else
        # Optimizations for systems with less RAM
        echo "vm.swappiness = 30" >> "$output_file"
        echo "vm.vfs_cache_pressure = 100" >> "$output_file"
        echo "vm.dirty_ratio = 20" >> "$output_file"
        echo "vm.dirty_background_ratio = 10" >> "$output_file"
        echo "vm.nr_hugepages = 512" >> "$output_file"
    fi

    # Storage optimizations
    if [[ ${DISK_INFO[type]} == "0" ]]; then
        # SSD optimizations
        echo -e "\n# SSD Optimizations" >> "$output_file"
        echo "vm.dirty_bytes = 8388608" >> "$output_file"
        echo "vm.dirty_background_bytes = 4194304" >> "$output_file"
        
        # Create udev rule for SSD scheduler
        echo 'ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="none"' > /etc/udev/rules.d/60-scheduler.rules
    else
        # HDD optimizations
        echo -e "\n# HDD Optimizations" >> "$output_file"
        echo "vm.dirty_bytes = 33554432" >> "$output_file"
        echo "vm.dirty_background_bytes = 16777216" >> "$output_file"
        
        # Create udev rule for HDD scheduler
        echo 'ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/scheduler}="bfq"' > /etc/udev/rules.d/60-scheduler.rules
    fi

    # Network optimizations
    echo -e "\n# Network Optimizations" >> "$output_file"
    if [[ ${NET_INFO[speed]} == *"1000"* ]]; then
        # Gigabit network optimizations
        echo "net.core.rmem_max = 16777216" >> "$output_file"
        echo "net.core.wmem_max = 16777216" >> "$output_file"
        echo "net.ipv4.tcp_rmem = 4096 87380 16777216" >> "$output_file"
        echo "net.ipv4.tcp_wmem = 4096 65536 16777216" >> "$output_file"
    else
        # Standard network optimizations
        echo "net.core.rmem_max = 8388608" >> "$output_file"
        echo "net.core.wmem_max = 8388608" >> "$output_file"
        echo "net.ipv4.tcp_rmem = 4096 87380 8388608" >> "$output_file"
        echo "net.ipv4.tcp_wmem = 4096 65536 8388608" >> "$output_file"
    fi
}

apply_cpu_governor() {
    echo -e "${BLUE}Configuring CPU governor...${NC}"
    
    # Create CPU configuration file
    cat > /etc/default/cpu-optimization.conf << EOF
# CPU Optimization Configuration
GOVERNOR="performance"
SCALING_MIN_FREQ="$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq)"
SCALING_MAX_FREQ="$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq)"
EOF

    # Apply performance governor to all CPUs
    for cpu in /sys/devices/system/cpu/cpu[0-9]*; do
        echo "performance" > "$cpu/cpufreq/scaling_governor" 2>/dev/null || true
    done
}

optimize_virtual_memory() {
    echo -e "${BLUE}Optimizing virtual memory settings...${NC}"
    
    local total_ram_kb=$((${MEM_INFO[total]} / 1024))
    
    # Calculate optimal vm.min_free_kbytes (0.5% of total RAM)
    local min_free_kb=$((total_ram_kb / 200))
    sysctl -w vm.min_free_kbytes=$min_free_kb

    # Enable transparent hugepages for VM workloads
    echo "always" > /sys/kernel/mm/transparent_hugepage/enabled
}

create_restore_point() {
    local backup_dir="/root/system_backup_$(date +%Y%m%d_%H%M%S)"
    echo -e "${BLUE}Creating backup at ${backup_dir}...${NC}"
    
    mkdir -p "$backup_dir"
    cp /etc/sysctl.conf "$backup_dir/"
    cp /etc/default/grub "$backup_dir/"
    
    # Create restore script
    cat > "$backup_dir/restore.sh" << 'EOF'
#!/bin/bash
BACKUP_DIR=$(dirname "$0")
cp "$BACKUP_DIR/sysctl.conf" /etc/
cp "$BACKUP_DIR/grub" /etc/default/
sysctl -p
update-grub
echo "System restored to original settings"
EOF
    chmod +x "$backup_dir/restore.sh"
    
    echo -e "${GREEN}Backup created. To restore, run: ${backup_dir}/restore.sh${NC}"
}

main() {
    # Check for root privileges
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}This script must be run as root${NC}"
        exit 1
    }

    # Parse command line arguments
    local action="assess"
    while [[ $# -gt 0 ]]; do
        case $1 in
            assess|optimize)
                action=$1
                shift
                ;;
            --help|-h)
                echo "Usage: $0 [assess|optimize] [--help]"
                exit 0
                ;;
            *)
                echo -e "${RED}Unknown option: $1${NC}"
                exit 1
                ;;
        esac
    done

    # Gather system information
    gather_system_info

    if [[ $action == "assess" ]]; then
        # Generate assessment report
        {
            echo "=== System Assessment Report ==="
            echo "Date: $(date)"
            echo -e "\n=== Hardware Information ==="
            echo "CPU: ${CPU_INFO[model]}"
            echo "Cores: ${CPU_INFO[cores]}"
            echo "Threads per Core: ${CPU_INFO[threads_per_core]}"
            echo "L3 Cache: ${CPU_INFO[cache_size]}"
            echo "Virtualization: ${CPU_INFO[virtualization]}"
            echo -e "\nMemory:"
            free -h
            echo -e "\nDisk Information:"
            lsblk -d -o NAME,SIZE,ROTA,SCHED
            echo -e "\nNetwork Interface:"
            ip -br addr show
        } | tee assessment_report.txt
        
        echo -e "${GREEN}Assessment complete. Results saved to assessment_report.txt${NC}"
    else
        # Perform optimization
        create_restore_point
        generate_optimizations
        apply_cpu_governor
        optimize_virtual_memory
        
        # Apply new settings
        sysctl -p /etc/sysctl.d/99-performance.conf
        
        echo -e "${GREEN}Optimization complete. Please reboot your system to apply all changes.${NC}"
    fi
}

main "$@"
